- hosts: localhost
  connection: local
  gather_facts: false
  pre_tasks:
    - tags: [ always ]
      loop: ["common.yml","{{ env }}/environment.yml"]
      ansible.builtin.include_vars: "{{ item }}"
  tasks:
    - tags: [ never, key ]
      block:
        - name: Get SSH public key
          register: reg_key
          ansible.builtin.command: >
            ssh-keygen -f ~/.ssh/{{ env }}.pem -y
        - name: Add SSH public key to EC2
          amazon.aws.ec2_key:
            region: "{{ region }}"
            name: "{{ base_name }}"
            state: present
            key_material: "{{ reg_key.stdout }}"

    - tags: [ never, create ]
      block:
        - name: Abort if version is not specified
          when: version is not defined
          ansible.builtin.fail:
        - name: Get VPC info
          register: reg_vpc
          amazon.aws.ec2_vpc_net_info:
            region: "{{ region }}"
            filters: {"tag:Name": "default"}
        - name: Get VPC ID
          ansible.builtin.set_fact:
            vpc_id: "{{ reg_vpc.vpcs[0].vpc_id }}"
        - name: Create security group
          amazon.aws.ec2_group:
            region: "{{ region }}"
            vpc_id: "{{ vpc_id }}"
            name: "{{ ins_secgrp_name }}"
            state: present
            description: "{{ ins_secgrp_name }}"
            rules:
              - proto: "tcp"
                ports: [22,80]
                cidr_ip: "172.16.0.0/12"
                rule_desc: ""

    - tags: [ never, create, increment ]
      block:
        - name: Set counter value diff
          ansible.builtin.set_fact:
            diff: +1
       
    - tags: [ never, decrement ]
      block:
        - name: Set counter value diff
          ansible.builtin.set_fact:
            diff: -1

    - tags: [ never, create, increment, decrement ]
      block:
        - name: Change counter value to {{ new_gen }} in SSM
          vars:
            new_gen: "{{ lookup('amazon.aws.aws_ssm', ins_ssm_name, region=region, on_missing='skip')|int + (diff|int) }}"
          community.aws.aws_ssm_parameter_store:
            region: "{{ region }}"
            name: "{{ ins_ssm_name }}"
            state: present
            value: "{{ new_gen }}"

    - tags: [ never, create, delete, stop ]
      block:
        - name: Get EC2 instance name prefix
          vars:
            ssm_gen: "{{ lookup('amazon.aws.aws_ssm', ins_ssm_name, region=region) }}"
          ansible.builtin.set_fact:
            current_ec2_prefix: "{{ base_name }}-g{{ ssm_gen }}-"

    - tags: [ never, cleanup ]
      block:
        - name: Override EC2 instance name prefix
          ansible.builtin.set_fact:
            current_ec2_prefix: dummy

    - tags: [ never, create ]
      block:
        - name: Set hostnames
          ansible.builtin.set_fact:
            hostnames: "{{ [current_ec2_prefix] | map('join') | product(numbers) | map('join') }}"
        - name: Get VPC subnet info
          register: reg_subnet
          amazon.aws.ec2_vpc_subnet_info:
            region: "{{ region }}"
            filters: {"vpc-id": "{{ vpc_id }}"}
        - name: Associate EC2 instances with VPC subnets
          loop: "{{ hostnames }}"
          loop_control: {index_var: idx}
          vars:
            subnet_ids: "{{ reg_subnet | json_query('subnets[].subnet_id') }}"
            instance:
              - name: "{{ item }}"
                subnet_id: "{{ subnet_ids[(idx % (subnet_ids|length))] }}"
          ansible.builtin.set_fact:
            instances_to_create: "{{ (instances_to_create|default([])) + instance }}"
        - name: Create new EC2 instances
          loop: "{{ instances_to_create }}"
          vars:
            ami_path: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
          amazon.aws.ec2_instance:
            region: "{{ region }}"
            name: "{{ item.name }}"
            state: running
            image_id: "{{ lookup('aws_ssm', ami_path, region=region) }}"
            instance_type: t3.nano
            vpc_subnet_id: "{{ item.subnet_id }}"
            security_groups: ["{{ ins_secgrp_name }}"]
            key_name: "{{ base_name }}"
            network: {"assign_public_ip":true}
            termination_protection: false
            wait: true
            volumes:
              - device_name: "/dev/xvda"
                ebs: {"volume_type":"gp2","volume_size":8,"encrypted":true,"delete_on_termination":true}

    - tags: [ never, create, stop ]
      block:
        - name: Set EC2 state to look for running EC2 instances
          ansible.builtin.set_fact:
            ec2_state: ["running"]

    - tags: [ never, delete ]
      block:
        - name: Set EC2 state to look for stopped EC2 instances
          ansible.builtin.set_fact:
            ec2_state: ["stopped"]

    - tags: [ never, cleanup ]
      block:
        - name: Set EC2 state to look for any EC2 instances
          ansible.builtin.set_fact:
            ec2_state: ["*"]

    - tags: [ never, create, delete, stop ]
      block:
        - name: Get EC2 instance info
          register: reg_ec2
          community.aws.ec2_instance_info:
            region: "{{ region }}"
            filters:
              "tag:Name": "{{ base_name }}-g*"
              instance-state-name: "{{ ec2_state }}"
        - name: Get EC2 instance IDs and IPs
          vars:
            query: 'instances[].{"name": tags.Name, "id":instance_id, "ip": private_ip_address, "state": state.name}'
          ansible.builtin.set_fact:
            found_instances: "{{ reg_ec2 | json_query(query) }}"

    - tags: [ never, create ]
      block:
        - name: Get EC2 instance IDs
          loop: "{{ found_instances }}"
          when: item.name is search(current_ec2_prefix)
          ansible.builtin.set_fact:
            targets: "{{ (targets|default([])) + [item] }}"

    - tags: [ never, delete, stop ]
      block:
        - name: Get EC2 instance IDs
          loop: "{{ found_instances }}"
          when: item.name is not search(current_ec2_prefix)
          ansible.builtin.set_fact:
            targets: "{{ (targets|default([])) + [item] }}"

    - tags: [ never, create, delete, stop ]
      block:
        - name: Abort if no targets detected
          when: targets is not defined
          ansible.builtin.fail:

    - tags: [ never, stop, delete ]
      block:
        - name: Show EC2 instances to modify
          ansible.builtin.debug:
            msg: "{{ targets }}"
        - name: Confirm to continue
          when: noprompt is not defined
          ansible.builtin.pause:
            prompt: "Press Enter to continue. Press CTRL+C => A to abort."

    - tags: [ never, delete ]
      block:
        - name: Delete EC2 instances
          ignore_errors: true # could be failed when no instances found
          amazon.aws.ec2_instance:
            region: "{{ region }}"
            state: absent
            instance_ids: "{{ targets | json_query('[].id') }}"
            wait: false

    - tags: [ never, create, delete, stop ]
      block:
        - name: Get ALB target group ARN
          register: reg_targrp
          community.aws.elb_target_group_info:
            region: "{{ region }}"
            names: "{{ alb_targrp_name }}"
        - name: Add EC2 instances to Ansible inventory
          loop: "{{ targets }}"
          ansible.builtin.add_host:
            groups: ec2_instances
            name: "{{ item.name }}.{{ private_domain }}"
            ec2_instance_id: "{{ item.id }}"
            private_ip_address: "{{ item.ip }}"
            targrp_arn: "{{ reg_targrp | json_query('target_groups[0].target_group_arn') }}"

- hosts: ec2_instances
  gather_facts: false
  vars:
    ansible_user: ec2-user
    ansible_ssh_common_args: -o StrictHostKeyChecking=no
    ansible_ssh_private_key_file: "~/.ssh/{{ env }}.pem"
  pre_tasks:
    - tags: [ always ]
      loop:
        - common.yml
        - "{{ env }}/environment.yml"
      ansible.builtin.include_vars: "{{ item }}"
  tasks:
    - tags: [ never, create ]
      block:
        - name: Set DNS record state to present
          ansible.builtin.set_fact:
            dns_state: present
            dns_wait: true

    - tags: [ never, delete, destroy ]
      block:
        - name: Set DNS record state to absent
          ansible.builtin.set_fact:
            dns_state: absent
            dns_wait: false

    - tags: [ never, create, delete ]
      block:
        - name: Update DNS A records
          delegate_to: localhost
          community.aws.route53:
            state: "{{ dns_state }}"
            zone: "{{ private_domain }}."
            private_zone: true
            record: "{{ inventory_hostname }}"
            type: A
            ttl: 300
            value: "{{ private_ip_address }}"
            overwrite: true
            wait: "{{ dns_wait }}"

    - tags: [ never, create ]
      block:
        - name: Wait until SSH port is up
          ansible.builtin.wait_for_connection:
          timeout: 120
        - name: Set new hostname
          become: true
          ansible.builtin.hostname:
            name: "{{ inventory_hostname.split('.') | first }}"
        - name: Update all existing packages
          register: reg_dnf
          become: true
          ansible.builtin.dnf:
            name:  "*"
            state: latest
        - name: Reboot
          when: reg_dnf.changed
          become: true
          ansible.builtin.reboot:
        - name: Install Docker
          become: true
          ansible.builtin.dnf:
            name: docker
            state: latest
        - name: Start Docker
          become: true
          ansible.builtin.systemd:
            name: docker
            state: restarted
            enabled: true
        - name: Add current user to Docker user group
          become: true
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes
        - name: Reset connection to reload user groups
          ansible.builtin.meta: reset_connection
        - name: Start Docker container
          community.docker.docker_container:
            name: nginx
            state: started
            recreate: yes
            image: "docker.io/nginx:{{ version }}"
            published_ports: ['80:80']
            restart_policy: always # Start container on system boot
            log_driver: json-file
            log_options:
              max-size: "10m"
              max-file: "3"
              compress: "false"
        - name: Add EC2 instance to ALB target group
          delegate_to: localhost # Ansible module requires AWS CLI
          community.aws.elb_target:
            region: "{{ region }}"
            target_group_name: "{{ alb_targrp_name }}"
            target_id: "{{ ec2_instance_id }}"
            state: present
            target_status: healthy
            target_status_timeout: 60

    - tags: [ never, stop ]
      block:
        - name: Remove EC2 instance from ALB target group
          delegate_to: localhost # Ansible module requires AWS CLI
          community.aws.elb_target:
            region: "{{ region }}"
            target_group_name: "{{ alb_targrp_name }}"
            target_id: "{{ ec2_instance_id }}"
            state: absent
            target_status: unused
            target_status_timeout: 60
        - name: Stop EC2 instance
          become: true
          community.general.shutdown:

- hosts: localhost
  connection: local
  gather_facts: false
  pre_tasks:
    - tags: [ always ]
      loop:
        - common.yml
        - "{{ env }}/environment.yml"
      ansible.builtin.include_vars: "{{ item }}"
  tasks:
    - tags: [ never, cleanup ]
      block:
        - name: Remove generation counter from SSM
          community.aws.aws_ssm_parameter_store:
            region: "{{ region }}"
            name: "{{ ins_ssm_name }}"
            state: absent
        - name: Remove SSH public key from EC2
          amazon.aws.ec2_key:
            region: "{{ region }}"
            name: "{{ base_name }}"
            state: absent
        - name: Get VPC info
          register: reg_vpc
          amazon.aws.ec2_vpc_net_info:
            region: "{{ region }}"
            filters: {"tag:Name": "default"}
        - name: Get VPC ID
          ansible.builtin.set_fact:
            vpc_id: "{{ reg_vpc.vpcs[0].vpc_id }}"
        - name: Delete security group
          until: reg_secgrp.failed == false
          retries: 6
          delay: 10
          register: reg_secgrp
          amazon.aws.ec2_group:
            region: "{{ region }}"
            vpc_id: "{{ vpc_id }}"
            name: "{{ ins_secgrp_name }}"
            state: absent

    - tags: [ never, status ]
      block:
        - name: Get EC2 instance info
          register: reg_ec2
          community.aws.ec2_instance_info:
            region: "{{ region }}"
            filters:
              "tag:Name": "{{ base_name }}-g*"
              instance-state-name: ["pending","running","shutting-down","stopping","stopped"]
        - name: Get EC2 status
          vars:
            query: 'instances[].{"name": tags.Name, "id":instance_id, "ec2_state": state.name}'
          ansible.builtin.set_fact:
            ec2_info_list: "{{ reg_ec2 | json_query(query) }}"
        - name: Get ALB target group info
          register: reg_targrp
          community.aws.elb_target_group_info:
            region: "{{ region }}"
            names: ["{{ alb_targrp_name }}"]
            collect_targets_health: true
        - name: Get target group status
          vars:
            query: "target_groups[?target_group_name=='{{ alb_targrp_name }}'].targets_health_description[].{id:target.id,targrp_state:target_health.state}"
          ansible.builtin.set_fact:
            targrp_info: "{{ reg_targrp | json_query(query) }}"
        - name: Merge status info
          loop: "{{ ec2_info_list }}"
          vars:
            query: "[?id=='{{ item.id }}'].targrp_state"
            instance:
              "1 ID": "{{ item.id }}"
              "2 Name": "{{ item.name }}"
              "3 State(EC2)": "{{ item.ec2_state }}"
              "4 State(ALB)": "{{ targrp_info | json_query(query) | join(',') }}"
          ansible.builtin.set_fact:
            merged_status: "{{ (merged_status|default([])) + [instance] }}"
        - name: Show status
          ansible.builtin.debug:
            msg:
              - "Generation Number": "{{ lookup('amazon.aws.aws_ssm', ins_ssm_name, region=region) }}"
              - "{{ merged_status|default('No instances found') }}"
